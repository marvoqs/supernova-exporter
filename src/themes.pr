{[ const types = ["color","border","gradient","measure","shadow","radius","typography"] /]}

import { colors, ThemedColorsType, CustomThemedColorsType } from "./colors";
import { borders, BordersType, CustomBordersType } from "./borders";
import { gradients, GradientsType, CustomGradientsType } from "./gradients";
import { measures, MeasuresType, CustomMeasuresType } from "./measures";
import { shadows, ShadowsType, CustomShadowsType } from "./shadows";
import { raddii, RadiiType, CustomRadiiType } from "./radii";
import {
  typographies,
  TypographiesType,
  CustomTypographiesType,
} from "./typographies";

export interface ThemeType {
    colors: ThemedColorsType,
    borders: BordersType,
    gradients: GradientsType,
    measures: MeasuresType,
    shadows: ShadowsType,
    radii: RadiiType,
    typographies: TypographiesType,
};

export interface CustomThemeType {
    colors: CustomThemedColorsType,
    borders: CustomBordersType,
    gradients: CustomGradientsType,
    measures: CustomMeasuresType,
    shadows: CustomShadowsType,
    radii: CustomRadiiType,
    typographies: CustomTypographiesType,
};


{[ let brand = ds.currentBrand() /]}
{[ const group = ds.tokenGroupTreeByType("Color", brand.id) /]}
{[ let darkColorGroup = findDarkColorsGroup(group.subgroups) /]}
{[ if !!darkColorGroup ]}
const darkTheme: ThemeType = {
  colors: colors.dark,
  borders: borders,
  gradients: gradients,
  measures: measures,
  shadows: shadows,
  radii: raddii,
  typographies: typographies,
};
{[ else ]}
const darkTheme = undefined;
{[/]}

const lightTheme: ThemeType = {
  colors: colors.light,
  borders: borders,
  gradients: gradients,
  measures: measures,
  shadows: shadows,
  radii: raddii,
  typographies: typographies,
};

export interface ThemesType {
  darkTheme: ThemeType | undefined,
  lightTheme: ThemeType,
}

export const themes: ThemesType = {
  darkTheme,
  lightTheme,
};