{[ global CURRENT_TYPE = "Measure" /]}

{[ const behavior = getBehavior(CURRENT_TYPE) /]}

{[ let brand = ds.currentBrand() /]}
{[ const group = ds.tokenGroupTreeByType(CURRENT_TYPE, brand.id) /]}
{[ const tokens = ds.tokensByType(CURRENT_TYPE, brand.id) /]}

export type MeasureTokenUnitType = "em" | "percent" | "point" | "px";

export interface {{ behavior.itemTypeName }} {
  unit: MeasureTokenUnitType;
  value: number;
}

export type {{ behavior.typeName }} = {[ inject "rendered-group-type" context group /]};

export type Custom{{ behavior.typeName }} = {[ inject "rendered-group-custom-type" context group /]};

export const {{ behavior.varName }}: {{ behavior.typeName }} = {[ inject "rendered-group-content" context group /]};

export type MeasureVariantType = {[ if !tokens.length ]}never;{[/]}
{[ if !!tokens.length ]}
{[ for token in tokens ]}
{[ inject "rendered-token-path" context token /]}
{[/]}
{[/]}